import numpy as np
from copy import deepcopy

exemplars = [
    # 0
    np.array([
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1,  1,  1,  1,  1,  1,  1, -1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1, -1,  1,  1,  1,  1,  1,  1, -1, -1],
    ]).flatten(),
    # 1
    np.array([
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1,  1, -1, -1, -1, -1, -1],
        [-1, -1, -1,  1,  1, -1, -1, -1, -1, -1],
        [-1, -1,  1, -1,  1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1,  1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1,  1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1,  1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1,  1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1,  1, -1, -1, -1, -1, -1],
        [-1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
    ]).flatten(),    
    # 2
    np.array([
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1,  1,  1,  1,  1, -1, -1, -1],
        [-1, -1,  1, -1, -1, -1, -1,  1, -1, -1],
        [-1,  1, -1, -1, -1, -1, -1,  1, -1, -1],
        [-1, -1, -1, -1, -1, -1,  1, -1, -1, -1],
        [-1, -1, -1, -1, -1,  1, -1, -1, -1, -1],
        [-1, -1, -1, -1,  1, -1, -1, -1, -1, -1],
        [-1, -1, -1,  1, -1, -1, -1, -1, -1, -1],
        [-1, -1,  1, -1, -1, -1, -1, -1, -1, -1],
        [-1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
    ]).flatten(),
    # 3
    np.array([
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1,  1,  1,  1,  1,  1, -1, -1],
        [-1, -1,  1, -1, -1, -1, -1, -1,  1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1, -1, -1, -1, -1,  1,  1,  1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1, -1,  1, -1, -1, -1, -1, -1,  1, -1],
        [-1, -1, -1,  1,  1,  1,  1,  1, -1, -1],
    ]).flatten(),    
    # 4
    np.array([
        [-1, -1, -1, -1, -1, -1,  1, -1, -1, -1],
        [-1, -1, -1, -1, -1,  1,  1, -1, -1, -1],
        [-1, -1, -1, -1,  1, -1,  1, -1, -1, -1],
        [-1, -1, -1,  1, -1, -1,  1, -1, -1, -1],
        [-1, -1,  1, -1, -1, -1,  1, -1, -1, -1],
        [-1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
        [-1, -1, -1, -1, -1, -1,  1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1,  1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1,  1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1,  1, -1, -1, -1],
    ]).flatten(),    
    # 5
    np.array([
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1,  1, -1],
        [-1,  1,  1,  1,  1,  1,  1,  1, -1, -1],
    ]).flatten(),    
    # 6
    np.array([
        [-1, -1, -1, -1,  1,  1,  1, -1, -1, -1],
        [-1, -1, -1,  1, -1, -1, -1,  1, -1, -1],
        [-1, -1,  1, -1, -1, -1, -1, -1, -1, -1],
        [-1,  1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1,  1, -1,  1,  1,  1, -1, -1, -1, -1],
        [-1,  1,  1, -1, -1, -1,  1, -1, -1, -1],
        [-1,  1, -1, -1, -1, -1, -1,  1, -1, -1],
        [-1,  1, -1, -1, -1, -1, -1,  1, -1, -1],
        [-1, -1,  1, -1, -1, -1,  1, -1, -1, -1],
        [-1, -1, -1,  1,  1,  1, -1, -1, -1, -1]
    ]).flatten(),  
    # 7
    np.array([
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1,  1,  1,  1,  1,  1,  1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1,  1, -1, -1],
        [-1, -1, -1, -1, -1, -1,  1, -1, -1, -1],
        [-1, -1, -1, -1, -1,  1, -1, -1, -1, -1],
        [-1, -1, -1, -1,  1, -1, -1, -1, -1, -1],
        [-1, -1, -1,  1, -1, -1, -1, -1, -1, -1],
        [-1, -1,  1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
        [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
    ]).flatten()
]

def load_noisy_data(threshold: float=0.9):
    noisy = []
    for exemplar in exemplars:
        _exemplar = deepcopy(exemplar)
        for i in range(len(_exemplar)):
            proba = np.random.random()
            if proba < threshold:
                continue
            else:
                _exemplar[i] *= -1

        noisy += [_exemplar]

    return noisy